<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>numpy&amp;pandas参考手册</title>
      <link href="/2019/09/24/Numpy-Pandas/"/>
      <url>/2019/09/24/Numpy-Pandas/</url>
      
        <content type="html"><![CDATA[<h2 id="NUMPY"><a href="#NUMPY" class="headerlink" title="NUMPY"></a>NUMPY</h2><h3 id="基本属性："><a href="#基本属性：" class="headerlink" title="基本属性："></a>基本属性：</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array(</span><br><span class="line">    [ </span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  <span class="comment"># 行</span></span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="comment">#   列 </span></span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">print(array)</span><br><span class="line">print(<span class="string">'维数  :'</span>, array.ndim)</span><br><span class="line">print(<span class="string">'shape :'</span>, array.shape)</span><br><span class="line">print(<span class="string">'size  :'</span>, array.size)</span><br></pre></td></tr></table></figure><pre><code>[[1 2 3] [4 5 6]]维数  : 2shape : (2, 3)size  : 6</code></pre><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(<span class="string">"定义序列元素的类型"</span>)</span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.int32)</span><br><span class="line">print(<span class="string">'a :'</span>,a)</span><br><span class="line">print(<span class="string">'a 元素的类型：'</span>, a.dtype)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"构造‘空’3*4的矩阵，同时指定矩阵元素类型"</span>)</span><br><span class="line">a = np.empty( (<span class="number">3</span>, <span class="number">4</span>), dtype=np.int32)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"构造‘零’3*4的矩阵"</span>)</span><br><span class="line">a = np.zeros( (<span class="number">3</span>, <span class="number">4</span>) )</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"构造‘1’3*4的矩阵"</span>)</span><br><span class="line">a = np.ones( (<span class="number">3</span>, <span class="number">4</span>) )</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"构造从10到20，步长为2的序列"</span>)</span><br><span class="line">a = np.arange(<span class="number">10</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"构造从0到11的序列，并将其转换为3*4的矩阵"</span>)</span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape( (<span class="number">3</span>, <span class="number">4</span>) ) </span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"构造从1到10,元素数目为5的序列"</span>)</span><br><span class="line">a = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"构造2*4的矩阵，其元素值在0到1范围内随机"</span>)</span><br><span class="line">a = np.random.random( (<span class="number">2</span>,<span class="number">4</span>) )</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><pre><code>定义序列元素的类型a : [1 2 3]a 元素的类型： int32构造‘空’3*4的矩阵，同时指定矩阵元素类型[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]]构造‘零’3*4的矩阵[[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]]构造‘1’3*4的矩阵[[1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.]]构造从10到20，步长为2的序列[10 12 14 16 18]构造从0到11的序列，并将其转换为3*4的矩阵[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]]构造从1到10,元素数目为5的序列[ 1.    3.25  5.5   7.75 10.  ]构造2*4的矩阵，其元素值在0到1范围内随机[[0.32225108 0.00871789 0.68554722 0.24996619] [0.02829478 0.24664924 0.23749488 0.38477046]]</code></pre><h3 id="基本计算-加减乘除"><a href="#基本计算-加减乘除" class="headerlink" title="基本计算 - 加减乘除"></a>基本计算 - 加减乘除</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array( [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>] )</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line">print(<span class="string">'a：'</span>, a, <span class="string">' b：'</span>, b)</span><br><span class="line">print(<span class="string">'a + b = '</span>,a + b)</span><br><span class="line">print(<span class="string">'a - b = '</span>,a - b)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'b平方      ：'</span>, b**<span class="number">2</span>)</span><br><span class="line">print(<span class="string">'10 * sin(b)：'</span>,<span class="number">10</span> * np.sin(b))</span><br><span class="line">print(<span class="string">'b &lt; 2      ：'</span>, b &lt; <span class="number">2</span> )</span><br><span class="line"></span><br><span class="line">am = np.array( [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>]] )</span><br><span class="line">bm = np.arange(<span class="number">4</span>).reshape( (<span class="number">2</span>, <span class="number">2</span>) )</span><br><span class="line">print(<span class="string">'am：'</span>)</span><br><span class="line">print(am)</span><br><span class="line">print(<span class="string">'bm：'</span>)</span><br><span class="line">print(bm)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'am * bm ： '</span>)</span><br><span class="line">print(am * bm)</span><br><span class="line">print(<span class="string">'am . bm ： '</span>)</span><br><span class="line">print(am.dot(bm))    <span class="comment"># ‘点’乘是矩阵乘法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'bm矩阵求和           ：'</span>,np.sum(bm) )</span><br><span class="line">print(<span class="string">'bm矩阵按行求和       ：'</span>,np.sum(bm, axis=<span class="number">0</span>) )</span><br><span class="line">print(<span class="string">'bm矩阵按列求和       ：'</span>,np.sum(bm, axis=<span class="number">1</span>) )</span><br><span class="line">print(<span class="string">'bm矩阵元素最大值     ：'</span>,np.max(bm) )</span><br><span class="line">print(<span class="string">'bm矩阵每行元素最大值 ：'</span>,np.max(bm, axis=<span class="number">0</span>) )</span><br><span class="line">print(<span class="string">'bm矩阵每列元素最大值 ：'</span>,np.max(bm, axis=<span class="number">1</span>) )</span><br><span class="line">print(<span class="string">'bm矩阵元素最小值     ：'</span>,np.min(bm) )</span><br></pre></td></tr></table></figure><pre><code>a： [10 11 12 13]  b： [0 1 2 3]a + b =  [10 12 14 16]a - b =  [10 10 10 10]b平方      ： [0 1 4 9]10 * sin(b)： [0.         8.41470985 9.09297427 1.41120008]b &lt; 2      ： [ True  True False False]am：[[1 1] [0 1]]bm：[[0 1] [2 3]]am * bm ： [[0 1] [0 3]]am . bm ： [[2 4] [2 3]]bm矩阵求和           ： 6bm矩阵按行求和       ： [2 4]bm矩阵按列求和       ： [1 5]bm矩阵元素最大值     ： 3bm矩阵每行元素最大值 ： [2 3]bm矩阵每列元素最大值 ： [1 3]bm矩阵元素最小值     ： 0</code></pre><h3 id="基本计算-矩形相关函数"><a href="#基本计算-矩形相关函数" class="headerlink" title="基本计算 - 矩形相关函数"></a>基本计算 - 矩形相关函数</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">2</span>, <span class="number">14</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="string">'A ：'</span>)</span><br><span class="line">print(A)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'A矩阵中最小元素所在位置 np.argmin(A)：'</span>, np.argmin(A) )</span><br><span class="line">print(<span class="string">'A矩阵中最大元素所在位置 np.argmax(A)：'</span>, np.argmax(A) )</span><br><span class="line">print(<span class="string">'A矩阵的平均值 np.mean(A) 或 A.mean()：'</span>, np.mean(A),A.mean())</span><br><span class="line">print(<span class="string">'A矩阵的中位数 np.median(A)：'</span>, np.median(A) )</span><br><span class="line">print(<span class="string">'A矩阵按位累加求和 np.cumsum(A)：'</span>, np.cumsum(A) )</span><br><span class="line">print(<span class="string">'A矩阵每2个元素的差 np.diff(A)：'</span>)</span><br><span class="line">print( np.diff(A) )</span><br><span class="line"></span><br><span class="line">print(<span class="string">'A矩阵每2个元素的差 np.diff(A)：'</span>)</span><br><span class="line">print(<span class="string">'A矩阵中不为0的元素 np.nonzero(A)：'</span>, np.nonzero(A))</span><br><span class="line">print(<span class="string">'输出结果说明：前一个数组与后一个数据按位组成矩阵下标，表示该下标对于矩阵元素不为0'</span>)</span><br><span class="line">print(<span class="string">'如前数组第7位为1，后数组第7位为2，构成的矩阵下标为[1,2]，表示A[1,2]处对应位置元素值不为0'</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">'A矩阵排序 np.sort(A)：'</span>, np.sort(A))</span><br><span class="line">print(<span class="string">'A矩阵转置 np.transpose(A) 或 A.T :'</span>)</span><br><span class="line">print(A.T)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'将A矩阵中所有小于5的数设置为5，所有大于5的数设置为9 np.clip(A, 5, 9) ：'</span></span><br><span class="line">print( np.clip(A, <span class="number">5</span>, <span class="number">9</span>))</span><br></pre></td></tr></table></figure><pre><code>A ：[[ 2  3  4  5] [ 6  7  8  9] [10 11 12 13]]A矩阵中最小元素所在位置 np.argmin(A)： 0A矩阵中最大元素所在位置 np.argmax(A)： 11A矩阵的平均值 np.mean(A) 或 A.mean()： 7.5 7.5A矩阵的中位数 np.median(A)： 7.5A矩阵按位累加求和 np.cumsum(A)： [ 2  5  9 14 20 27 35 44 54 65 77 90]A矩阵每2个元素的差 np.diff(A)：[[1 1 1] [1 1 1] [1 1 1]]A矩阵每2个元素的差 np.diff(A)：A矩阵中不为0的元素 np.nonzero(A)： (array([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], dtype=int64), array([0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], dtype=int64))输出结果说明：前一个数组与后一个数据按位组成矩阵下标，表示该下标对于矩阵元素不为0如前数组第7位为1，后数组第7位为2，构成的矩阵下标为[1,2]，表示A[1,2]处对应位置元素值不为0A矩阵排序 np.sort(A)： [[ 2  3  4  5] [ 6  7  8  9] [10 11 12 13]]A矩阵转置 np.transposeo(A) 或 A.T :[[ 2  6 10] [ 3  7 11] [ 4  8 12] [ 5  9 13]]将A矩阵中所有小于5的数设置为5，所有大于5的数设置为9 np.clip(A, 5, 9) [[5 5 5 5] [6 7 8 9] [9 9 9 9]]</code></pre><h3 id="NUMPY-索引操作"><a href="#NUMPY-索引操作" class="headerlink" title="NUMPY 索引操作"></a>NUMPY 索引操作</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>)</span><br><span class="line">print(<span class="string">'A ：'</span>)</span><br><span class="line">print(<span class="string">'A[3]的值 ： '</span>, A[<span class="number">3</span>])</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'将A组织为3*4 , A = A.reshape((3,4))'</span>)</span><br><span class="line">A = A.reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(<span class="string">"A："</span>)</span><br><span class="line">print(A)</span><br><span class="line">print(<span class="string">'A[2]的值 ： '</span>, A[<span class="number">2</span>])</span><br><span class="line">print(<span class="string">'A[2][1] 或 A[2,1]的值 ： '</span>, A[<span class="number">2</span>][<span class="number">1</span>], A[<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">print(<span class="string">'第2行所有数 A[2,:] :'</span>, A[<span class="number">2</span>,:])</span><br><span class="line">print(<span class="string">'第1列所有数 A[:,1] :'</span>, A[:,<span class="number">1</span>])</span><br><span class="line">print(<span class="string">'第1行第2、3列的数 A[1,1:3] :'</span>, A[<span class="number">1</span>,<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'遍历每一行：'</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> A:</span><br><span class="line">    print(row)</span><br><span class="line">    </span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'遍历每一列：'</span>)</span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> A.T:</span><br><span class="line">    print(column)</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'遍历每一个元素：'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A.flat:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><pre><code>A ：A[3]的值 ：  6将A组织为3*4A：[[ 3  4  5  6] [ 7  8  9 10] [11 12 13 14]]A[2]的值 ：  [11 12 13 14]A[2][1] 或 A[2,1]的值 ：  12 12第2行所有数 A[2,:] : [11 12 13 14]第1列所有数 A[:,1] : [ 4  8 12]第1行第2、3列的数 A[1,1:3] : [8 9]遍历每一行：[3 4 5 6][ 7  8  9 10][11 12 13 14]遍历每一列：[ 3  7 11][ 4  8 12][ 5  9 13][ 6 10 14]遍历每一个元素：34567891011121314</code></pre><h3 id="numpy-array合并操作"><a href="#numpy-array合并操作" class="headerlink" title="numpy array合并操作"></a>numpy array合并操作</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">print(<span class="string">'序列A：'</span>,A ,<span class="string">'A.shape：'</span>,A.shape)</span><br><span class="line">print(<span class="string">'序列B：'</span>,B ,<span class="string">'B.shape：'</span>,B.shape)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'A、B按垂直方向合并 ：np.vstack( (A,B) ) :'</span>)</span><br><span class="line">print(np.vstack((A,B)))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'A、B按水平方向合并 ：np.hstack( (A,B) ) :'</span>)</span><br><span class="line">print(np.hstack((A,B)))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'将序列A转换为3*1的数组 A = A[:,np.newaxis]'</span>)</span><br><span class="line">A = A[:,np.newaxis]</span><br><span class="line">print(<span class="string">'数组A:'</span>)</span><br><span class="line">print(A)</span><br><span class="line">print(<span class="string">'A.shape：'</span>,A.shape)</span><br><span class="line">B = B[:,np.newaxis]</span><br><span class="line">print(<span class="string">'将序列B转换为3*1的数组 B = B[:,np.newaxis]'</span>)</span><br><span class="line">print(<span class="string">'数组B:'</span>)</span><br><span class="line">print(B)</span><br><span class="line">print(<span class="string">'B.shape：'</span>,B.shape)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'A、B按垂直方向合并 ：np.vstack( (A,B) ) :'</span>)</span><br><span class="line">print(np.vstack((A,B)))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'A、B按水平方向合并 ：np.hstack( (A,B) ) :'</span>)</span><br><span class="line">print(np.hstack((A,B)))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'按垂直方向合并多个A、B数组： C = np.concatenate( (A,B,B,A) , axis = 0)'</span>)</span><br><span class="line">C = np.concatenate( (A,B,B,A) , axis = <span class="number">0</span>)</span><br><span class="line">print(<span class="string">'C：'</span>)</span><br><span class="line">print(C)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'按水平方向合并多个A、B数组： C = np.concatenate( (A,B,B,A) , axis = 1)'</span>)</span><br><span class="line">C = np.concatenate( (A,B,B,A) , axis = <span class="number">1</span>)</span><br><span class="line">print(<span class="string">'C：'</span>)</span><br><span class="line">print(C)</span><br></pre></td></tr></table></figure><pre><code>序列A： [1 1 1] A.shape： (3,)序列B： [2 2 2] B.shape： (3,)A、B按垂直方向合并 ：np.vstack( (A,B) ) :[[1 1 1] [2 2 2]]A、B按水平方向合并 ：np.hstack( (A,B) ) :[1 1 1 2 2 2]将序列A转换为3*1的数组 A = A[:,np.newaxis]数组A:[[1] [1] [1]]A.shape： (3, 1)将序列B转换为3*1的数组 B = B[:,np.newaxis]数组B:[[2] [2] [2]]B.shape： (3, 1)A、B按垂直方向合并 ：np.vstack( (A,B) ) :[[1] [1] [1] [2] [2] [2]]A、B按水平方向合并 ：np.hstack( (A,B) ) :[[1 2] [1 2] [1 2]]按垂直方向合并多个A、B数组： C = np.concatenate( (A,B,B,A) , axis = 0)C：[[1] [1] [1] [2] [2] [2] [2] [2] [2] [1] [1] [1]]按水平方向合并多个A、B数组： C = np.concatenate( (A,B,B,A) , axis = 1)C：[[1 2 2 1] [1 2 2 1] [1 2 2 1]]</code></pre><h3 id="numpy-array分割"><a href="#numpy-array分割" class="headerlink" title="numpy array分割"></a>numpy array分割</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(<span class="string">'A：'</span>)</span><br><span class="line">print(A)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'均分：'</span>)</span><br><span class="line">print(<span class="string">'按列将A均分为2个部分：np.split(A,2,axis=1)'</span>,np.split(A,<span class="number">2</span>,axis=<span class="number">1</span>))</span><br><span class="line">print(<span class="string">'按行将A均分为3个部分：np.split(A,3,axis=0)'</span>,np.split(A,<span class="number">3</span>,axis=<span class="number">0</span>))</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">'非均分：'</span>)</span><br><span class="line">print(<span class="string">'按列将A非均分为3个部分：np.array_split(A,3,axis=1)'</span>,np.array_split(A,<span class="number">3</span>,axis=<span class="number">1</span>))</span><br><span class="line">print(<span class="string">'按行将A非均分为2个部分：np.array_split(A,2,axis=0)'</span>,np.array_split(A,<span class="number">2</span>,axis=<span class="number">0</span>))</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">'纵横向分割-简单方法：'</span>)</span><br><span class="line">print(<span class="string">'按列将A均分为3个部分：np.vsplit(A,3)'</span>,np.vsplit(A,<span class="number">3</span>))</span><br><span class="line">print(<span class="string">'按行将A均分为2个部分：np.hsplit(A,2)'</span>,np.hsplit(A,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>A：[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]]均分：按列将A均分为2个部分：np.split(A,2,axis=1) [array([[0, 1],       [4, 5],       [8, 9]]), array([[ 2,  3],       [ 6,  7],       [10, 11]])]按行将A均分为3个部分：np.split(A,3,axis=0) [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]非均分：按列将A非均分为3个部分：np.array_split(A,3,axis=1) [array([[0, 1],       [4, 5],       [8, 9]]), array([[ 2],       [ 6],       [10]]), array([[ 3],       [ 7],       [11]])]按行将A非均分为2个部分：np.array_split(A,2,axis=0) [array([[0, 1, 2, 3],       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]纵横向分割：按列将A均分为3个部分：np.vsplit(A,3) [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]按行将A均分为2个部分：np.hsplit(A,2) [array([[0, 1],       [4, 5],       [8, 9]]), array([[ 2,  3],       [ 6,  7],       [10, 11]])]</code></pre><h3 id="Numpy-引用-amp-Copy"><a href="#Numpy-引用-amp-Copy" class="headerlink" title="Numpy 引用 &amp;  Copy"></a>Numpy 引用 &amp;  Copy</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"a ："</span>, a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------示例：引用 -----------------'</span>)</span><br><span class="line">print(<span class="string">"赋值： b = a 、 c = a 、d = b"</span>)</span><br><span class="line">b = a</span><br><span class="line">c = a</span><br><span class="line">d = b</span><br><span class="line">print(<span class="string">'b is a :'</span>, b <span class="keyword">is</span> a )</span><br><span class="line">print(<span class="string">'c is a :'</span>, c <span class="keyword">is</span> a )</span><br><span class="line">print(<span class="string">'b is d :'</span>, b <span class="keyword">is</span> d )</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------示例：copy -----------------'</span>)</span><br><span class="line">print(<span class="string">'copy: b = a.copy() 注意这里的copy是完全复制，即deep copy'</span>)</span><br><span class="line">b = a.copy()</span><br><span class="line">print(<span class="string">'b is a :'</span>,b <span class="keyword">is</span> a)</span><br></pre></td></tr></table></figure><pre><code>a ： [0 1 2 3]------------示例：引用 -----------------赋值： b = a 、 c = a 、d = bb is a : Truec is a : Trueb is d : True------------示例：copy -----------------copy: b = a.copy() 注意这里的copy是完全复制，即deep copyb is a : False</code></pre><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(<span class="string">'pd.Series -&gt; 创建序列： '</span>)</span><br><span class="line">s = pd.Series( [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,np.nan,<span class="number">44</span>,<span class="number">1</span>] )</span><br><span class="line">print(s)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'pd.date_range -&gt; 创建日期序列： '</span>)</span><br><span class="line">dates = pd.date_range( <span class="string">'20190101'</span>,periods=<span class="number">6</span> )</span><br><span class="line">print(dates)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df = pd.DataFrame -&gt; 创建数据表 结构6*4 数据为随机数 索引为日期 列名自定义：'</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'df = pd.DataFrame -&gt; 以默认方式生成数据表 结构为3*4'</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df = pd.DataFrame -&gt; 以指定每列数据的形式生成数据表 结构为3*4'</span>)</span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">'A'</span>: <span class="number">1.</span> ,</span><br><span class="line">    <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20180808'</span>) ,</span><br><span class="line">    <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>) ,</span><br><span class="line">    <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>, dtype=<span class="string">'int32'</span>) ,</span><br><span class="line">    <span class="string">'E'</span>: pd.Categorical( [<span class="string">'test'</span>, <span class="string">'train'</span>, <span class="string">'test'</span>, <span class="string">'train'</span>] ) ,</span><br><span class="line">    <span class="string">'F'</span>: <span class="string">'foo'</span></span><br><span class="line">&#125;)</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.dtypes  ：'</span>)</span><br><span class="line">print(df.dtypes)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.index :'</span>)</span><br><span class="line">print(df.index)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.columns :'</span>)</span><br><span class="line">print(df.columns)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.values :'</span>)</span><br><span class="line">print(df.values)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.describe() :'</span>)</span><br><span class="line">print(df.describe())</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.T :'</span>)</span><br><span class="line">print(df.T)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.sort_index(axis=1 ,ascending=False) :'</span>)</span><br><span class="line">print(df.sort_index(axis=<span class="number">1</span> ,ascending=<span class="literal">False</span>))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.sort_values(by=\'E\'): '</span>)</span><br><span class="line">print(df.sort_values(by=<span class="string">'E'</span>))</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><pre><code>pd.Series -&gt; 创建序列： 0     1.01     3.02     6.03     NaN4    44.05     1.0dtype: float64pd.date_range -&gt; 创建日期序列： DatetimeIndex([&apos;2019-01-01&apos;, &apos;2019-01-02&apos;, &apos;2019-01-03&apos;, &apos;2019-01-04&apos;,               &apos;2019-01-05&apos;, &apos;2019-01-06&apos;],              dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)df = pd.DataFrame -&gt; 创建数据表 结构6*4 数据为随机数 索引为日期 列名自定义：                   a         b         c         d2019-01-01  0.829698  0.052480 -1.422617 -0.9886892019-01-02 -1.185078 -0.222656  0.196208 -0.0070962019-01-03 -0.479776  0.748260  0.132970 -1.3585592019-01-04  0.656898 -1.568701  1.335519 -0.2173832019-01-05  0.101697 -0.728978  0.160587 -1.1866132019-01-06  0.224157  0.640915 -0.133297  0.706373df = pd.DataFrame -&gt; 以默认方式生成数据表 结构为3*4   0  1   2   30  0  1   2   31  4  5   6   72  8  9  10  11df = pd.DataFrame -&gt; 以指定每列数据的形式生成数据表 结构为3*4     A          B    C  D      E    F0  1.0 2018-08-08  1.0  3   test  foo1  1.0 2018-08-08  1.0  3  train  foo2  1.0 2018-08-08  1.0  3   test  foo3  1.0 2018-08-08  1.0  3  train  foodf.dtypes  ：A           float64B    datetime64[ns]C           float32D             int32E          categoryF            objectdtype: objectdf.index :Int64Index([0, 1, 2, 3], dtype=&apos;int64&apos;)df.columns :Index([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;], dtype=&apos;object&apos;)df.values :[[1.0 Timestamp(&apos;2018-08-08 00:00:00&apos;) 1.0 3 &apos;test&apos; &apos;foo&apos;] [1.0 Timestamp(&apos;2018-08-08 00:00:00&apos;) 1.0 3 &apos;train&apos; &apos;foo&apos;] [1.0 Timestamp(&apos;2018-08-08 00:00:00&apos;) 1.0 3 &apos;test&apos; &apos;foo&apos;] [1.0 Timestamp(&apos;2018-08-08 00:00:00&apos;) 1.0 3 &apos;train&apos; &apos;foo&apos;]]df.describe() :         A    C    Dcount  4.0  4.0  4.0mean   1.0  1.0  3.0std    0.0  0.0  0.0min    1.0  1.0  3.025%    1.0  1.0  3.050%    1.0  1.0  3.075%    1.0  1.0  3.0max    1.0  1.0  3.0df.T :                     0                    1                    2  \A                    1                    1                    1   B  2018-08-08 00:00:00  2018-08-08 00:00:00  2018-08-08 00:00:00   C                    1                    1                    1   D                    3                    3                    3   E                 test                train                 test   F                  foo                  foo                  foo                        3  A                    1  B  2018-08-08 00:00:00  C                    1  D                    3  E                train  F                  foo  df.sort_index(axis=1 ,ascending=False) :     F      E  D    C          B    A0  foo   test  3  1.0 2018-08-08  1.01  foo  train  3  1.0 2018-08-08  1.02  foo   test  3  1.0 2018-08-08  1.03  foo  train  3  1.0 2018-08-08  1.0df.sort_values(by=&apos;E&apos;):      A          B    C  D      E    F0  1.0 2018-08-08  1.0  3   test  foo2  1.0 2018-08-08  1.0  3   test  foo1  1.0 2018-08-08  1.0  3  train  foo3  1.0 2018-08-08  1.0  3  train  foo</code></pre><h3 id="Pandas-选择数据"><a href="#Pandas-选择数据" class="headerlink" title="Pandas 选择数据"></a>Pandas 选择数据</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dates = pd.date_range( <span class="string">'20190101'</span>,periods=<span class="number">6</span> )</span><br><span class="line">print(<span class="string">'df = pd.DataFrame -&gt; 创建数据表 结构6*4 数据为0到23 索引为日期 列名A到D：'</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)), index=dates, columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line">print(<span class="string">'df :'</span>)</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df[\'A\'] 或 df.A : 选择 A 列 '</span>)</span><br><span class="line">print(df[<span class="string">'A'</span>])</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df[0:3] 或 df[\'20190101\',\'20190103\'] ： 选择前三行 '</span>)</span><br><span class="line">print(df[<span class="string">'20190101'</span>:<span class="string">'20190103'</span>])</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.loc[ : ,[\'A\',\'B\' ]] : 选择A、B列所有数据'</span>)</span><br><span class="line">print( df.loc[ : , [<span class="string">'A'</span>,<span class="string">'B'</span>] ])</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.loc[\'20190102\': \'20190104\' ,[\'A\',\'B\' ]] : 按标签选择指定行的A、B列'</span>)</span><br><span class="line">print( df.loc[<span class="string">'20190102'</span>:<span class="string">'20190104'</span>, [<span class="string">'A'</span>,<span class="string">'B'</span>] ])</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.iloc[ 3:5 , 1:3] : 按位置选择第3行到第5行，第1列到第3列的数据'</span>)</span><br><span class="line">print(df.iloc[ <span class="number">3</span>:<span class="number">5</span>, <span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df.iloc[ [1,3,5] , 1:3] : 按位置不连续筛选，选择1、3、5行，第1列到第3列的数据'</span>)</span><br><span class="line">print( df.iloc[ [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>], <span class="number">1</span>:<span class="number">3</span>] )</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"不建议使用 df.ix 方法"</span>)</span><br><span class="line"><span class="comment">#print('df.ix[ :3, [\'A\',\'C\'] ] : 即按标签又按位置选择前3行,A、C列的数据')</span></span><br><span class="line"><span class="comment">#print( df.ix[ :3, ['A','C'] ] )</span></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df[ (df.A&gt;8) &amp; (df.D &lt;=19) ] : 筛选出A列数据大于8，D列数据小于等于19的数据'</span>)</span><br><span class="line">print( df[ (df.A &gt; <span class="number">8</span>) &amp; (df.D &lt;= <span class="number">19</span> )  ] )</span><br><span class="line"></span><br><span class="line">print(<span class="string">'df[ (df.A&gt;8) &amp; (df.D &lt;=19) ].iloc[ : , 1:3 ] : 筛选出A列数据大于8，D列数据小于等于19的数据,并仅显示B、C列'</span>)</span><br><span class="line">print( df[(df.A &gt; <span class="number">8</span>) &amp; (df.D &lt;= <span class="number">19</span> )].iloc[:,<span class="number">1</span>:<span class="number">3</span>] )</span><br></pre></td></tr></table></figure><pre><code>df = pd.DataFrame -&gt; 创建数据表 结构6*4 数据为0到23 索引为日期 列名A到D：df :             A   B   C   D2019-01-01   0   1   2   32019-01-02   4   5   6   72019-01-03   8   9  10  112019-01-04  12  13  14  152019-01-05  16  17  18  192019-01-06  20  21  22  23df[&apos;A&apos;] 或 df.A : 选择 A 列 2019-01-01     02019-01-02     42019-01-03     82019-01-04    122019-01-05    162019-01-06    20Freq: D, Name: A, dtype: int32df[0:3] 或 df[&apos;20190101&apos;,&apos;20190103&apos;] ： 选择前三行             A  B   C   D2019-01-01  0  1   2   32019-01-02  4  5   6   72019-01-03  8  9  10  11df.loc[ : ,[&apos;A&apos;,&apos;B&apos; ]] : 选择A、B列所有数据             A   B2019-01-01   0   12019-01-02   4   52019-01-03   8   92019-01-04  12  132019-01-05  16  172019-01-06  20  21df.loc[&apos;20190102&apos;: &apos;20190104&apos; ,[&apos;A&apos;,&apos;B&apos; ]] : 按标签选择指定行的A、B列             A   B2019-01-02   4   52019-01-03   8   92019-01-04  12  13df.iloc[ 3:5 , 1:3] : 按位置选择第3行到第5行，第1列到第3列的数据             B   C2019-01-04  13  142019-01-05  17  18df.iloc[ [1,3,5] , 1:3] : 按位置不连续筛选，选择1、3、5行，第1列到第3列的数据             B   C2019-01-02   5   62019-01-04  13  142019-01-06  21  22不建议使用 df.ix 方法df[ (df.A&gt;8) &amp; (df.D &lt;=19) ] : 筛选出A列数据大于8，D列数据小于等于19的数据             A   B   C   D2019-01-04  12  13  14  152019-01-05  16  17  18  19df[ (df.A&gt;8) &amp; (df.D &lt;=19) ].iloc[ : , 1:3 ] : 筛选出A列数据大于8，D列数据小于等于19的数据,并仅显示B、C列             B   C2019-01-04  13  142019-01-05  17  18</code></pre><h3 id="Pandas-设置值"><a href="#Pandas-设置值" class="headerlink" title="Pandas 设置值"></a>Pandas 设置值</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dates = pd.date_range( <span class="string">'20190101'</span>,periods=<span class="number">6</span> )</span><br><span class="line">print(<span class="string">'df = pd.DataFrame -&gt; 创建数据表 结构6*4 数据为0到23 索引为日期 列名A到D：'</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)), index=dates, columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line">print(<span class="string">'df :'</span>)</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df.iloc[2,2]=100 设置df行坐标2,纵坐标2对应元素的值为100"</span>)</span><br><span class="line">print(<span class="string">'df.loc[ "20190101","B"] = 200 设置20190101行,B列对应元素的值为200'</span>)</span><br><span class="line">df.iloc[<span class="number">2</span>,<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line">df.loc[<span class="string">'20190101'</span>,<span class="string">'B'</span>] = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'df :'</span>)</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df[df.A&gt;4] = 0 将df中A列中元素值大于4的所在行的元素值设为0"</span>)</span><br><span class="line">df[ df.A &gt; <span class="number">4</span> ] = <span class="number">0</span> </span><br><span class="line">print(<span class="string">'df :'</span>)</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df.A[df.A!=4] = 300 将df的A列中不等于4的元素设为300"</span>)</span><br><span class="line">df.A[df.A != <span class="number">4</span>] = <span class="number">300</span></span><br><span class="line">print(<span class="string">'df :'</span>)</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df['F'] = np.nan 新增F列，其值为nan"</span>)</span><br><span class="line">df[<span class="string">'F'</span>] = np.nan</span><br><span class="line">print(<span class="string">'df :'</span>)</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><pre><code>df = pd.DataFrame -&gt; 创建数据表 结构6*4 数据为0到23 索引为日期 列名A到D：df :             A   B   C   D2019-01-01   0   1   2   32019-01-02   4   5   6   72019-01-03   8   9  10  112019-01-04  12  13  14  152019-01-05  16  17  18  192019-01-06  20  21  22  23df.iloc[2,2]=100 设置df行坐标2,纵坐标2对应元素的值为100df.loc[ &quot;20190101&quot;,&quot;B&quot;] = 200 设置20190101行,B列对应元素的值为200df :             A    B    C   D2019-01-01   0  200    2   32019-01-02   4    5    6   72019-01-03   8    9  100  112019-01-04  12   13   14  152019-01-05  16   17   18  192019-01-06  20   21   22  23df[df.A&gt;4] = 0 将df中A列中元素值大于4的所在行的元素值设为0df :            A    B  C  D2019-01-01  0  200  2  32019-01-02  4    5  6  72019-01-03  0    0  0  02019-01-04  0    0  0  02019-01-05  0    0  0  02019-01-06  0    0  0  0df.A[df.A!=4] = 300 将df的A列中不等于4的元素设为300df :              A    B  C  D2019-01-01  300  200  2  32019-01-02    4    5  6  72019-01-03  300    0  0  02019-01-04  300    0  0  02019-01-05  300    0  0  02019-01-06  300    0  0  0df[&apos;F&apos;] = np.nan 新增F列，其值为nandf :              A    B  C  D   F2019-01-01  300  200  2  3 NaN2019-01-02    4    5  6  7 NaN2019-01-03  300    0  0  0 NaN2019-01-04  300    0  0  0 NaN2019-01-05  300    0  0  0 NaN2019-01-06  300    0  0  0 NaN</code></pre><h3 id="Pandas-处理丢失的数据"><a href="#Pandas-处理丢失的数据" class="headerlink" title="Pandas 处理丢失的数据"></a>Pandas 处理丢失的数据</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dates = pd.date_range( <span class="string">'20190101'</span>,periods=<span class="number">6</span> )</span><br><span class="line">print(<span class="string">'df = pd.DataFrame -&gt; 创建数据表 结构6*4 数据为0到23 索引为日期 列名A到D：'</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)), index=dates, columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line">df.iloc[<span class="number">0</span>,<span class="number">1</span>] = np.nan</span><br><span class="line">df.iloc[<span class="number">1</span>,<span class="number">2</span>] = np.nan</span><br><span class="line">print(<span class="string">'df :'</span>)</span><br><span class="line">print(df)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df.dropna(axis=0, how='any') 丢弃含有nan值的行 #条件：how='any',只要行含有nan；how='all',行的所有元素为nan"</span>)</span><br><span class="line">print(<span class="string">'df :'</span>)</span><br><span class="line">print(df.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df.fillna(value=100) 将df中为nan的值改为100"</span>)</span><br><span class="line">print(<span class="string">'df :'</span>)</span><br><span class="line">print(df.fillna(value=<span class="number">100</span>))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"np.any(df.isnull())  判断df有无nan"</span>,np.any(df.isnull()) )</span><br></pre></td></tr></table></figure><pre><code>df = pd.DataFrame -&gt; 创建数据表 结构6*4 数据为0到23 索引为日期 列名A到D：df :             A     B     C   D2019-01-01   0   NaN   2.0   32019-01-02   4   5.0   NaN   72019-01-03   8   9.0  10.0  112019-01-04  12  13.0  14.0  152019-01-05  16  17.0  18.0  192019-01-06  20  21.0  22.0  23df.dropna(axis=0, how=&apos;any&apos;) 丢弃含有nan值的行 #条件：how=&apos;any&apos;,只要行含有nan；how=&apos;all&apos;,行的所有元素为nandf :             A     B     C   D2019-01-03   8   9.0  10.0  112019-01-04  12  13.0  14.0  152019-01-05  16  17.0  18.0  192019-01-06  20  21.0  22.0  23df.fillna(value=100) 将df中为nan的值改为100df :             A      B      C   D2019-01-01   0  100.0    2.0   32019-01-02   4    5.0  100.0   72019-01-03   8    9.0   10.0  112019-01-04  12   13.0   14.0  152019-01-05  16   17.0   18.0  192019-01-06  20   21.0   22.0  23np.any(df.isnull())  判断df有无nan True</code></pre><h3 id="pandas-合并操作"><a href="#pandas-合并操作" class="headerlink" title="pandas 合并操作"></a>pandas 合并操作</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">2</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df1:"</span>)</span><br><span class="line">print(df1)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df2:"</span>)</span><br><span class="line">print(df2)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df3:"</span>)</span><br><span class="line">print(df3)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"pd.concat([df1,df2,df3],axis=0, ignore_index=True) 按行累加合并,重排索引:"</span>)</span><br><span class="line">print(pd.concat([df1,df2,df3],axis=<span class="number">0</span>,ignore_index=<span class="literal">True</span>) )</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"演示append :"</span>)</span><br><span class="line">print(<span class="string">"df1.append([df2,df3],ignore_index=True) 按行累加df2,df3并重排索引:"</span>)</span><br><span class="line">print(df1.append([df2,df3],ignore_index=<span class="literal">True</span>))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"s1 = pd.Series([1,2,3,4],index=['a','b','c','d']) 定义s1"</span>)</span><br><span class="line">s1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">print(<span class="string">"df1.append(s1, ignore_index=True) 向df1追加一条数据s1"</span>)</span><br><span class="line">print(df1.append(s1, ignore_index=<span class="literal">True</span>))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"演示join 注意df1、df2的列和index有重合"</span>)</span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], index=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df1 :"</span>)</span><br><span class="line">print(df1)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"df2 :"</span>)</span><br><span class="line">print(df2)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"pd.concat([df1,df2]) 直接合并，默认的join模式为outer"</span>)</span><br><span class="line">print(pd.concat([df1,df2]))</span><br><span class="line">print()      </span><br><span class="line"></span><br><span class="line">print(<span class="string">"pd.concat([df1,df2], join='inner') 合并重合列，join模式为inner"</span>)</span><br><span class="line">print(pd.concat([df1,df2], join=<span class="string">'inner'</span>))</span><br><span class="line">print()      </span><br><span class="line"></span><br><span class="line">print(<span class="string">"pd.concat([df1,df2], join='inner', ignore_index=True) 合并重合列，join模式为inner, 并重排索引"</span>)</span><br><span class="line">print(pd.concat([df1,df2], join=<span class="string">'inner'</span>, ignore_index=<span class="literal">True</span>))</span><br><span class="line">print()      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"pd.concat([df1,df2], axis=1, join_axes=[df1.index]) 按df1的index进行左右合并，df1没有的数据填充为nan"</span>)</span><br><span class="line">print(pd.concat([df1,df2], axis=<span class="number">1</span>, join_axes=[df1.index]))</span><br></pre></td></tr></table></figure><pre><code>df1:     a    b    c    d0  0.0  0.0  0.0  0.01  0.0  0.0  0.0  0.02  0.0  0.0  0.0  0.0df2:     a    b    c    d0  1.0  1.0  1.0  1.01  1.0  1.0  1.0  1.02  1.0  1.0  1.0  1.0df3:     a    b    c    d0  2.0  2.0  2.0  2.01  2.0  2.0  2.0  2.02  2.0  2.0  2.0  2.0pd.concat([df1,df2,df3],axis=0, ignore_index=True) 按行累加合并,重排索引:     a    b    c    d0  0.0  0.0  0.0  0.01  0.0  0.0  0.0  0.02  0.0  0.0  0.0  0.03  1.0  1.0  1.0  1.04  1.0  1.0  1.0  1.05  1.0  1.0  1.0  1.06  2.0  2.0  2.0  2.07  2.0  2.0  2.0  2.08  2.0  2.0  2.0  2.0演示append :df1.append([df2,df3],ignore_index=True) 按行累加df2,df3并重排索引:     a    b    c    d0  0.0  0.0  0.0  0.01  0.0  0.0  0.0  0.02  0.0  0.0  0.0  0.03  1.0  1.0  1.0  1.04  1.0  1.0  1.0  1.05  1.0  1.0  1.0  1.06  2.0  2.0  2.0  2.07  2.0  2.0  2.0  2.08  2.0  2.0  2.0  2.0s1 = pd.Series([1,2,3,4],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]) 定义s1df1.append(s1, ignore_index=True) 向df1追加一条数据s1     a    b    c    d0  0.0  0.0  0.0  0.01  0.0  0.0  0.0  0.02  0.0  0.0  0.0  0.03  1.0  2.0  3.0  4.0演示join 注意df1、df2的列和index有重合df1 :     a    b    c    d1  0.0  0.0  0.0  0.02  0.0  0.0  0.0  0.03  0.0  0.0  0.0  0.0df2 :     b    c    d    e2  1.0  1.0  1.0  1.03  1.0  1.0  1.0  1.04  1.0  1.0  1.0  1.0pd.concat([df1,df2]) 直接合并，默认的join模式为outer     a    b    c    d    e1  0.0  0.0  0.0  0.0  NaN2  0.0  0.0  0.0  0.0  NaN3  0.0  0.0  0.0  0.0  NaN2  NaN  1.0  1.0  1.0  1.03  NaN  1.0  1.0  1.0  1.04  NaN  1.0  1.0  1.0  1.0pd.concat([df1,df2], join=&apos;inner&apos;) 合并重合列，join模式为inner     b    c    d1  0.0  0.0  0.02  0.0  0.0  0.03  0.0  0.0  0.02  1.0  1.0  1.03  1.0  1.0  1.04  1.0  1.0  1.0pd.concat([df1,df2], join=&apos;inner&apos;, ignore_index=True) 合并重合列，join模式为inner, 并重排索引     b    c    d0  0.0  0.0  0.01  0.0  0.0  0.02  0.0  0.0  0.03  1.0  1.0  1.04  1.0  1.0  1.05  1.0  1.0  1.0pd.concat([df1,df2], axis=1, join_axes=[df1.index]) 按df1的index进行左右合并，df1没有的数据填充为nan     a    b    c    d    b    c    d    e1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.03  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0D:\devTools\python\Anaconda3\lib\site-packages\ipykernel_launcher.py:48: FutureWarning: Sorting because non-concatenation axis is not aligned. A future versionof pandas will change to not sort by default.To accept the future behavior, pass &apos;sort=False&apos;.To retain the current behavior and silence the warning, pass &apos;sort=True&apos;.</code></pre><h3 id="pandas-合并操作-merge"><a href="#pandas-合并操作-merge" class="headerlink" title="pandas 合并操作 - merge"></a>pandas 合并操作 - merge</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123; <span class="string">'key'</span>:[<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>,<span class="string">'K3'</span>],</span><br><span class="line">                        <span class="string">'A'</span>:[<span class="string">'A0'</span>,<span class="string">'A1'</span>,<span class="string">'A2'</span>,<span class="string">'A3'</span>],</span><br><span class="line">                        <span class="string">'B'</span>:[<span class="string">'B0'</span>,<span class="string">'B1'</span>,<span class="string">'B2'</span>,<span class="string">'B3'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">right= pd.DataFrame(&#123; <span class="string">'key'</span>:[<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>,<span class="string">'K3'</span>],</span><br><span class="line">                        <span class="string">'C'</span>:[<span class="string">'C0'</span>,<span class="string">'C1'</span>,<span class="string">'C2'</span>,<span class="string">'C3'</span>],</span><br><span class="line">                        <span class="string">'D'</span>:[<span class="string">'D0'</span>,<span class="string">'D1'</span>,<span class="string">'D2'</span>,<span class="string">'D3'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'left:'</span>)</span><br><span class="line">print(left)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'right:'</span>)</span><br><span class="line">print(right)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"pd.merge(left,right,on='key') 基于key合并"</span>)</span><br><span class="line">print(pd.merge(left,right,on=<span class="string">'key'</span>))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"left['key1'] = pd.Series(['K0','K0','K1','K2']) 修改left，添加key1列"</span>)</span><br><span class="line">left[<span class="string">'key1'</span>] = pd.Series([<span class="string">'K0'</span>,<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>])</span><br><span class="line">print(<span class="string">"left['key2'] = pd.Series(['K0','K1','K0','K1']) 修改left，添加key2列"</span>)</span><br><span class="line">left[<span class="string">'key2'</span>] = pd.Series([<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K0'</span>,<span class="string">'K1'</span>])</span><br><span class="line">print(<span class="string">"left.drop('key',axis=1) 修改left, 删除key列"</span>)</span><br><span class="line">left.drop(<span class="string">'key'</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"left :"</span>)</span><br><span class="line">print(left)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"right.rename(columns=&#123;'key':'key1'&#125;,inplace=True) 将right的key列重命名为key1列"</span>)</span><br><span class="line">right.rename(columns=&#123;<span class="string">'key'</span>:<span class="string">'key1'</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"right.loc[2,'key1'] = 'k1' 将key1列的第三个元素值修改为k1"</span>)</span><br><span class="line">print(<span class="string">"right.loc[3,'key1'] = 'k2' 将key1列的第四个元素值修改为k2"</span>)</span><br><span class="line">right.loc[<span class="number">2</span>,<span class="string">'key1'</span>] = <span class="string">'K1'</span></span><br><span class="line">right.loc[<span class="number">3</span>,<span class="string">'key1'</span>] = <span class="string">'K2'</span></span><br><span class="line">print(<span class="string">"right['key2'] = pd.Series(['K0','K0','K0','K0']) 修改right，添加key2列"</span>)</span><br><span class="line">right[<span class="string">'key2'</span>] = pd.Series([<span class="string">'K0'</span>,<span class="string">'K0'</span>,<span class="string">'K0'</span>,<span class="string">'K0'</span>])</span><br><span class="line">print(<span class="string">"right:"</span>)</span><br><span class="line">print(right)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"pd.merge(left,right,on=['key1','key2']) 基于key1、key2合并,默认合并模式为how=inner,即取相交 ◑◐"</span>)</span><br><span class="line">print(pd.merge(left,right,on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>]))</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"pd.merge(left,right,on=['key1','key2'], how='outer') 基于key1、key2合并,合并模式为how=outer,即取并集 ●●"</span>)</span><br><span class="line">print(pd.merge(left,right,on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>], how=<span class="string">'outer'</span>))</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"pd.merge(left,right,on=['key1','key2'], how='left') 基于key1、key2合并,合并模式为how=left,即以左边为主 ●○"</span>)</span><br><span class="line">print(pd.merge(left,right,on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>], how=<span class="string">'left'</span>))</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"pd.merge(left,right,on=['key1','key2'], how='right') 基于key1、key2合并,合并模式为how=right,即以右边为主 ○●"</span>)</span><br><span class="line">print(pd.merge(left,right,on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>], how=<span class="string">'right'</span>))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">0</span>,<span class="number">1</span>],<span class="string">'col_left'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">'col_right'</span>:[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]&#125;)</span><br><span class="line">print(<span class="string">'df1'</span>)</span><br><span class="line">print(df1)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">'df2'</span>)</span><br><span class="line">print(df2)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"pd.merge(df1,df2,on='col1',how='outer',indicator=True)  indicator显示合并的方式"</span>)</span><br><span class="line">print( pd.merge(df1,df2,on=<span class="string">'col1'</span>,how=<span class="string">'outer'</span>,indicator=<span class="literal">True</span>) )</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><pre><code>left:  key   A   B0  K0  A0  B01  K1  A1  B12  K2  A2  B23  K3  A3  B3right:  key   C   D0  K0  C0  D01  K1  C1  D12  K2  C2  D23  K3  C3  D3pd.merge(left,right,on=&apos;key&apos;) 基于key合并  key   A   B   C   D0  K0  A0  B0  C0  D01  K1  A1  B1  C1  D12  K2  A2  B2  C2  D23  K3  A3  B3  C3  D3left[&apos;key1&apos;] = pd.Series([&apos;K0&apos;,&apos;K0&apos;,&apos;K1&apos;,&apos;K2&apos;]) 修改left，添加key1列left[&apos;key2&apos;] = pd.Series([&apos;K0&apos;,&apos;K1&apos;,&apos;K0&apos;,&apos;K1&apos;]) 修改left，添加key2列left.drop(&apos;key&apos;,axis=1) 修改left, 删除key列left :    A   B key1 key20  A0  B0   K0   K01  A1  B1   K0   K12  A2  B2   K1   K03  A3  B3   K2   K1right.rename(columns={&apos;key&apos;:&apos;key1&apos;},inplace=True) 将right的key列重命名为key1列right.loc[2,&apos;key1&apos;] = &apos;k1&apos; 将key1列的第三个元素值修改为k1right.loc[3,&apos;key1&apos;] = &apos;k2&apos; 将key1列的第四个元素值修改为k2right[&apos;key2&apos;] = pd.Series([&apos;K0&apos;,&apos;K0&apos;,&apos;K0&apos;,&apos;K0&apos;]) 修改right，添加key2列right:  key1   C   D key20   K0  C0  D0   K01   K1  C1  D1   K02   K1  C2  D2   K03   K2  C3  D3   K0pd.merge(left,right,on=[&apos;key1&apos;,&apos;key2&apos;]) 基于key1、key2合并,默认合并模式为how=inner,即取相交 ◑◐    A   B key1 key2   C   D0  A0  B0   K0   K0  C0  D01  A2  B2   K1   K0  C1  D12  A2  B2   K1   K0  C2  D2pd.merge(left,right,on=[&apos;key1&apos;,&apos;key2&apos;], how=&apos;outer&apos;) 基于key1、key2合并,合并模式为how=outer,即取并集 ●●     A    B key1 key2    C    D0   A0   B0   K0   K0   C0   D01   A1   B1   K0   K1  NaN  NaN2   A2   B2   K1   K0   C1   D13   A2   B2   K1   K0   C2   D24   A3   B3   K2   K1  NaN  NaN5  NaN  NaN   K2   K0   C3   D3pd.merge(left,right,on=[&apos;key1&apos;,&apos;key2&apos;], how=&apos;left&apos;) 基于key1、key2合并,合并模式为how=left,即以左边为主 ●○    A   B key1 key2    C    D0  A0  B0   K0   K0   C0   D01  A1  B1   K0   K1  NaN  NaN2  A2  B2   K1   K0   C1   D13  A2  B2   K1   K0   C2   D24  A3  B3   K2   K1  NaN  NaNpd.merge(left,right,on=[&apos;key1&apos;,&apos;key2&apos;], how=&apos;right&apos;) 基于key1、key2合并,合并模式为how=right,即以右边为主 ○●     A    B key1 key2   C   D0   A0   B0   K0   K0  C0  D01   A2   B2   K1   K0  C1  D12   A2   B2   K1   K0  C2  D23  NaN  NaN   K2   K0  C3  D3df1   col1 col_left0     0        a1     1        bdf2   col1  col_right0     1          21     2          22     2          2pd.merge(df1,df2,on=&apos;col1&apos;,how=&apos;outer&apos;,indicator=True)  indicator显示合并的方式   col1 col_left  col_right      _merge0     0        a        NaN   left_only1     1        b        2.0        both2     2      NaN        2.0  right_only3     2      NaN        2.0  right_only</code></pre><h3 id="pandas-plot-图表"><a href="#pandas-plot-图表" class="headerlink" title="pandas plot 图表"></a>pandas plot 图表</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用iPython魔法方法，将图像内嵌于notebook中显示</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">print(<span class="string">"data = pd.Series(np.random.randn(1000),index=np.arange(1000)) 生成1000个随机数的序列"</span>)</span><br><span class="line">print(<span class="string">"data = data.cumsum() 按位累加求和 "</span>)</span><br><span class="line">print(<span class="string">"data.plot() 在画布中组织数据"</span>)</span><br><span class="line">print(<span class="string">"plt.show()  绘图显示"</span>)</span><br><span class="line">data = pd.Series(np.random.randn(<span class="number">1000</span>),index=np.arange(<span class="number">1000</span>))</span><br><span class="line">data = data.cumsum()</span><br><span class="line">data.plot()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"mdata = pd.DataFrame(np.random.randn(1000,4),index=np.arange(1000),columns=list('ABCD')) 生成1000*4的矩阵"</span>)</span><br><span class="line">print(<span class="string">"mdata = mdata.cumsum() 4列数据分别按位累加求和"</span>)</span><br><span class="line">print(<span class="string">"mdata.head() 显示前5行数据"</span>)</span><br><span class="line">print(<span class="string">"mdata.plot() 在画布中组织数据"</span>)</span><br><span class="line">print(<span class="string">"plt.show() 绘图显示"</span>)</span><br><span class="line">mdata = pd.DataFrame(np.random.randn(<span class="number">1000</span>,<span class="number">4</span>),index=np.arange(<span class="number">1000</span>),columns=list(<span class="string">"ABCD"</span>))</span><br><span class="line">mdata = mdata.cumsum()</span><br><span class="line">print(mdata.head())</span><br><span class="line">mdata.plot()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"plot 组织数据的方法有:"</span>)</span><br><span class="line">print(<span class="string">"'scatter'散点图、'bar'条形图、'hist'直方图、'box'箱体图、'kde'核密度图、'area'面积图、'pie'饼图 等等"</span>)</span><br><span class="line">print(<span class="string">"以散点图为例："</span>)</span><br><span class="line">print(<span class="string">"ax = mdata.plot.scatter(x='A',y='B',color='DarkBlue',label='Class 1') 以散点图的方式组织mdata数据，其中x为A列数据，y为B列数据"</span>)</span><br><span class="line">print(<span class="string">"mdata.plot.scatter(x='A',y='C'，color='DarkGreen', label='Class 2'，ax=ax) 以散点图组织第二组数据，并在同一张图中显示，其中，y为C列数据，"</span>)</span><br><span class="line">ax = mdata.plot.scatter(x=<span class="string">'A'</span>,y=<span class="string">'B'</span>,color=<span class="string">'DarkBlue'</span>,label=<span class="string">'Class 1'</span>)</span><br><span class="line">mdata.plot.scatter(x=<span class="string">'A'</span>,y=<span class="string">'C'</span>,color=<span class="string">'DarkGreen'</span>, label=<span class="string">'Class 2'</span>,ax=ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>data = pd.Series(np.random.randn(1000),index=np.arange(1000)) 生成1000个随机数的序列data = data.cumsum() 按位累加求和 data.plot() 在画布中组织数据plt.show()  绘图显示</code></pre><p><img src="/2019/09/24/Numpy-Pandas/output_31_1.png" alt="png"></p><pre><code>mdata = pd.DataFrame(np.random.randn(1000,4),index=np.arange(1000),columns=list(&apos;ABCD&apos;)) 生成1000*4的矩阵mdata = mdata.cumsum() 4列数据分别按位累加求和mdata.head() 显示前5行数据mdata.plot() 在画布中组织数据plt.show() 绘图显示          A         B         C         D0 -0.425858  0.280212 -0.651513 -0.9241501 -0.985065 -1.201727 -0.089678 -1.4523252 -0.786713 -1.499032  2.162605 -2.3604053 -1.870869 -2.881235  2.425202 -3.0831744  0.239143 -2.590475  1.754455 -4.839383</code></pre><p><img src="/2019/09/24/Numpy-Pandas/output_31_3.png" alt="png"></p><pre><code>plot 组织数据的方法有:&apos;scatter&apos;散点图、&apos;bar&apos;条形图、&apos;hist&apos;直方图、&apos;box&apos;箱体图、&apos;kde&apos;核密度图、&apos;area&apos;面积图、&apos;pie&apos;饼图 等等以散点图为例：ax = mdata.plot.scatter(x=&apos;A&apos;,y=&apos;B&apos;,color=&apos;DarkBlue&apos;,label=&apos;Class 1&apos;) 以散点图的方式组织mdata数据，其中x为A列数据，y为B列数据mdata.plot.scatter(x=&apos;A&apos;,y=&apos;C&apos;，color=&apos;DarkGreen&apos;, label=&apos;Class 2&apos;，ax=ax) 以散点图组织第二组数据，并在同一张图中显示，其中x为A列数据，y为C列数据，</code></pre><p><img src="/2019/09/24/Numpy-Pandas/output_31_5.png" alt="png"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> pandas </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rem怎么用 ?</title>
      <link href="/2019/08/21/Rem%E6%80%8E%E4%B9%88%E7%94%A8/"/>
      <url>/2019/08/21/Rem%E6%80%8E%E4%B9%88%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="源起："><a href="#源起：" class="headerlink" title="源起："></a>源起：</h3><p>假设在<code>640px</code>的设计稿中,某图片的设计宽度为<code>100px</code>。此时在设备分辨率<code>640px</code>的情况下，图片与整体页面布局的比例正好合适，比较美观。若在其他分辨率下想要完美显示设计稿内容，则图片的宽度应根据当前分辨率大小与640px的比例进行相应修改调整。例如，设备分辨率为<code>320px</code>,则应将该图片的宽度调整为<code>50px</code>，<code>即320 / 640 * 100px</code>,以便在该分辨率下按比例呈现设计稿内容，不至于错乱变形。</p><h3 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h3><p>一旦设备分辨率与设计稿的分辨率不一致,那么所有涉及到宽度的页面元素都要进行修改，比较麻烦 。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>使用rem代替px设置如图片等元素的宽度；<code>1rem = 16px</code> (<code>font-size</code>默认大小)，如果我们将<code>font-size</code>设为<code>100px</code>,则此时<code>1rem = 100px</code>。这样我们就可以将上例中的图片宽度设置为<code>1rem</code>,那么在分辨率为<code>640px</code>的设备中,<code>1rem</code>代表<code>100px</code>。</p><p>若设备分辨率为<code>320px</code>,我们可以将<code>font-size</code>设为<code>50px</code>, 图片宽度还是<code>1rem</code>保持不变，无需修改，因为此时的<code>1rem</code>就表示的是<code>50px</code>；如此通过在不同分辨率下设置<code>font-size</code>的默认大小,我们就可以实现在不同分辨率下的页面元素的等比例缩放效果。</p><h3 id="如何设置？"><a href="#如何设置？" class="headerlink" title="如何设置？"></a>如何设置？</h3><p>根据css的媒体查询动态设置根部html字体大小,示例代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">625%</span>; <span class="comment">/*100 ÷ 16 × 100% = 625% */</span>&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">360px</span>) and (max-width:<span class="number">374px</span>) and (orientation:portrait) &#123;</span><br><span class="line"> <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">703%</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">375px</span>) and (max-width:<span class="number">383px</span>) and (orientation:portrait) &#123;</span><br><span class="line"> <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">732.4%</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">384px</span>) and (max-width:<span class="number">399px</span>) and (orientation:portrait) &#123;</span><br><span class="line"> <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">750%</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">400px</span>) and (max-width:<span class="number">413px</span>) and (orientation:portrait) &#123;</span><br><span class="line"> <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">781.25%</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">414px</span>) and (max-width:<span class="number">431px</span>) and (orientation:portrait)&#123;</span><br><span class="line"> <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">808.6%</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">432px</span>) and (max-width:<span class="number">479px</span>) and (orientation:portrait)&#123;</span><br><span class="line"> <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">843.75%</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据<code>640px</code>的设计稿，上述代码将<code>font-size</code>默认大小设置为<code>625%</code>，即<code>1rem=100px</code>；这样做的好处是使得px到rem的换算比较容易，例如某元素的宽度在设计稿中为<code>20px</code>,则可指定其宽度为0.2rem即可。</p><p>代码中360px的<code>font-size</code>默认大小设置为什么是<code>703%</code>？这是因为CSS的像素单位px与设备像素单位px的定义是不一致的，具体关系详见<a href="https://blog.csdn.net/cout__waht/article/details/81697774" target="_blank" rel="noopener">《移动设备的px和css 的px区别解析》</a>；这里设计稿中的640px指定是设备像素单位，其CSS像素单位为320px；因此，CSS像素单位为360px的<code>font-size</code>默认大小为<code>360 / 320 * 625%</code>，约为<code>703%</code>。</p>]]></content>
      
      
      <categories>
          
          <category> UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
            <tag> CSS相对单位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/07/hello-world/"/>
      <url>/2019/05/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
